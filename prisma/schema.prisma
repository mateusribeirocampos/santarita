// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(MEMBER)
  donations Donation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String
  fullDescription String?
  date            DateTime
  time            String
  location        String?
  image           String?
  type            String
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("events")
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  type        CategoryType // EVENT, NEWS, etc.
  events      Event[]
  news        News[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("categories")
}

model News {
  id          String   @id @default(cuid())
  title       String
  summary     String
  content     String
  image       String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("news")
}

model Schedule {
  id        String       @id @default(cuid())
  dayOfWeek Int          // 0-6 (Sunday-Saturday)
  time      String
  title     String
  type      ScheduleType @default(REGULAR)
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  @@map("schedules")
}

model SpecialCelebration {
  id          String   @id @default(cuid())
  title       String
  date        DateTime
  schedule    Json     // Array of {time, title}
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("special_celebrations")
}

model Donation {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10,2)
  currency      String        @default("BRL")
  stripeId      String        @unique
  donationType  DonationType
  status        PaymentStatus
  donor         User?         @relation(fields: [donorId], references: [id])
  donorId       String?
  donorEmail    String?
  donorName     String?
  createdAt     DateTime      @default(now())
  
  @@map("donations")
}

model TimelineEvent {
  id          String   @id @default(cuid())
  year        String
  title       String
  description String
  image       String?
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("timeline_events")
}

model Priest {
  id          String   @id @default(cuid())
  name        String
  years       String
  description String
  image       String?
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("priests")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("newsletter_subscribers")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}

enum Role {
  ADMIN
  EDITOR
  MEMBER
}

enum CategoryType {
  EVENT
  NEWS
}

enum ScheduleType {
  REGULAR
  SPECIAL
}

enum DonationType {
  ONCE
  MONTHLY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}