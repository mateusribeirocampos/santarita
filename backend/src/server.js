const app = require('./app');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const PORT = process.env.PORT || 3001;

// Verificar conex√£o com banco de dados
const connectDatabase = async () => {
  try {
    await prisma.$connect();
    console.log('‚úÖ Conectado ao banco de dados PostgreSQL');
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco de dados:', error);
    process.exit(1);
  }
};

// Iniciar servidor
const startServer = async () => {
  try {
    await connectDatabase();
    
    app.listen(PORT, () => {
      console.log('\nüöÄ Servidor Igreja Santa Rita iniciado com sucesso!');
      console.log(`üì° Rodando na porta: ${PORT}`);
      console.log(`üåê URL: http://localhost:${PORT}`);
      console.log('\nüìù API Endpoints dispon√≠veis:');
      console.log('   üîê Auth: POST /api/auth/login, /api/auth/register');
      console.log('   üìÖ Events: GET/POST/PUT/DELETE /api/events');
      console.log('   üì∞ News: GET/POST/PUT/DELETE /api/news');
      console.log('   üè∑Ô∏è  Categories: GET/POST /api/categories');
      console.log('   üí∞ Stripe: POST /api/create-checkout-session');
      console.log('   ‚ù§Ô∏è  Health: GET /api/health');
      console.log('\n‚úÖ Servidor pronto para receber requisi√ß√µes!\n');
    });
  } catch (error) {
    console.error('‚ùå Erro ao iniciar servidor:', error);
    process.exit(1);
  }
};

// Graceful shutdown
const gracefulShutdown = async (signal) => {
  console.log(`\nüì° Recebido sinal ${signal}. Encerrando servidor...`);
  
  try {
    await prisma.$disconnect();
    console.log('‚úÖ Conex√£o com banco de dados encerrada');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro durante o encerramento:', error);
    process.exit(1);
  }
};

// Handlers para encerramento graceful
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Handler para erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Iniciar aplica√ß√£o
startServer();